from subprocess import check_output

from mycroft import MycroftSkill, intent_file_handler
from mycroft.api import DeviceApi


class SupportSkill(MycroftSkill):
    log_locations = ['/opt/mycroft/*.json', '/var/log/mycroft-*.log',
                     '/opt/mycroft/*.conf']
    host = 'termbin.com'

    support_title = 'Mycroft Troubleshooting Assistant'
    support_template = '''
        <p>Below is a link to the troubleshooting package generated by Mycroft:</p>
        
        <ul><tt>
        <p><b>Description:</b> {description}</p>
        <a href='{url}'>{url}</a>
        </tt></ul>
        
        <p>
        <a href='mailto:support@mycroft.ai?Subject=Troubleshooting%20Package&amp;body=Troubleshooting%20Package:%20{url}' target='_top'>Send this to support@mycroft.ai</a> to pass this information to the Mycroft team for further assistance.
        </p>
    '''

    debug_title = 'Mycroft Troubleshooting Assistant'
    debug_template = '''<p>Here's all the info from your device:</p>
        <ul><tt>
        <p><b>Device Name:</b> {device_name}</p>
        <p><b>Logs:</b> <a href='{url}'>{url}</a></p>
        </tt></ul>
    '''

    def __init__(self):
        MycroftSkill.__init__(self)

    def upload_and_create_url(self):
        logs = ' '.join(self.log_locations)
        return check_output('tail -vn +1 ' + logs + ' | nc ' + self.host + ' 9999', shell=True).decode()

    def get_device_name(self):
        try:
            return  DeviceApi().get()['name']
        except:
            self.log.exception('API Error')
            return ':error:'

    @intent_file_handler('maybe.troubleshoot.intent')
    def maybe_troubleshoot(self):
        should_troubleshoot = self.get_response('ask.troubleshoot')
        yes_words = self.translate_list('yes')
        if any(i in should_troubleshoot for i in yes_words):
            self.troubleshoot()
        else:
            self.speak_dialog('cancelled')

    @intent_file_handler('troubleshoot.intent')
    def troubleshoot(self):


        description = self.get_response('ask.description')

        if description is None:
            self.speak_dialog('cancelled')
            return

        url = self.upload_and_create_url()
        data = {'url': url, 'device_name': self.get_device_name(), 'description': description}

        # TODO: Use commented version once bugfix lands in release
        # email = '\n'.join(self.translate_template('support.email', data))
        email = self.support_template.format(**data)
        title = self.translate_list('support.title')[0]

        self.send_email(title, email)
        self.speak_dialog('troubleshoot')

    @intent_file_handler('send.debug.info.intent')
    def send_debug_info(self):
        url = self.upload_and_create_url()

        data = {'url': url, 'device_name': self.get_device_name()}

        # TODO: Use commented version once bugfix lands in release
        # email = '\n'.join(self.translate_template('debug.email', data))
        email = self.debug_template.format(**data)
        title = self.translate_list('debug.title')[0]

        self.send_email(title, email)
        token = url.replace('http://', '').replace(self.host, '').strip('/')
        verbal_str = self.host.replace('.', ' dot ') + ' slash ' + ', '.join(token)
        self.speak_dialog('uploaded', {'url': verbal_str})


def create_skill():
    return SupportSkill()
